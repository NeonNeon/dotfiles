#+TITLE My GNU Emacs configuration
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+DESCRIPTION: Loading emacs configuration using org-babel
# Based on
# https://github.com/credmp/emacs-config/blob/master/loader.org

* Introduction
This is my first attempt to use org-mode to write my configuration file.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Erik Norlander")
  (setq user-mail-address "e.olof.norlander@gmail.com")
#+END_SRC


* A secure Emacs environment
*This section is taken directly from the file that I used as a
[[https://github.com/credmp/emacs-config/blob/master/loader.org][template]].*

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets up the configuration to adhere to the articles recommondations.

#+BEGIN_SRC sh :exports none
python -m pip install --user certifi
#+END_SRC

#+RESULTS:
: Requirement already satisfied: certifi in /home/neon/.local/lib/python2.7/site-packages

#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'gnutls-available-p)
  ;;      (fmakunbound 'gnutls-available-p))

  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
  ;;  (let ((bad-hosts
  ;;         (loop for bad
  ;;               in `("https://wrong.host.badssl.com/"
  ;;                    "https://self-signed.badssl.com/")
  ;;               if (condition-case e
  ;;                      (url-retrieve
  ;;                       bad (lambda (retrieved) t))
  ;;                    (error nil))
  ;;               collect bad)))
  ;;    (if bad-hosts
  ;;        (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;;      (url-retrieve "https://badssl.com"
  ;;                    (lambda (retrieved) t))))
#+END_SRC

* Installing use-package
** Setup

GNU Emacs has a lot of packages that make things very easy for the
user. The package management infrastructure makes it a breeze to
install new packages and keep up-to-date with their development.

There are several package archives available for GNU Emacs:

- GNU
- Marmalade
- Melpa

Each archive will write its files in a seperate archive directory.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP access to the GNU archive, I set the variable to `nil` before adding the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))

  ;; Add marmalade to package repos
  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
#+end_src

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                  (package-initialize)
                  (package-install name)))))
          packages)
    (package-initialize)
    (delete-other-windows))
#+end_src

** The package

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src


* Some basic stuff

Don't make me type out "yes" or "no".

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

I use the [[http://ohmyz.sh/]["Oh My ZSH!"]]-shell and I prefer if emacs also uses this when
I start eshell.

#+BEGIN_SRC elisp
  (setenv "ESHELL" (expand-file-name "~/bin/eshell"))
#+END_SRC

I do not want tabs inside my source code.

#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

I would like the titles of my frames to reflect what system I am
currently on.

#+BEGIN_SRC elisp
  (setq frame-title-format
        (concat  "%b - emacs@" system-name))
#+END_SRC

I don't like to have my current directory cluttered with back-up
files. Put them in /tmp instead.

#+BEGIN_SRC elisp
  (defconst emacs-tmp-dir (format "%s%s%s/" temporary-file-directory "emacs" (user-uid)))
  (setq backup-directory-alist
        `((".*" . ,emacs-tmp-dir)))
  (setq auto-save-file-name-transforms
        `((".*" ,emacs-tmp-dir t)))
  (setq auto-save-list-file-prefix
        emacs-tmp-dir)
#+END_SRC

